version: 2
jobs:
  build-and-persist-artifacts:
    docker:
      - image: "lambci/lambda:build-go1.x"
    steps:
      - checkout
      - run: |
          cd pipeline
          make build
          mkdir /tmp/artifacts
          mkdir /tmp/workspace
          cp ../bin/*.zip /tmp/artifacts
          cp ../bin/*.zip /tmp/workspace

      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - ./
  test-terraform-plan-dev:
    docker:
      - image: hashicorp/terraform:0.12.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace      
      - run: |
          mkdir bin
          cp /tmp/workspace/*.zip bin
          export TF_VAR_account_id=$AWS_ACCOUNT_ID
          env=${DEPLOY_ENV:-dev}
          if [ "$env" == "dev" ]; then
            cd deployment/dev
            terraform init
            terraform plan
            exit "$?"
          fi
          exit 1
  test-terraform-plan-prod:
    docker:
      - image: hashicorp/terraform:0.12.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          mkdir bin
          cp /tmp/workspace/*.zip bin
          export TF_VAR_account_id=$AWS_ACCOUNT_ID
          env=${DEPLOY_ENV:-dev}
          if [ "$env" == "prod" ]; then
            cd deployment/prod
            terraform init
            terraform plan
            exit "$?"
          fi
          exit 1
  apply-terraform-dev:
    docker:
      - image: hashicorp/terraform:0.12.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace      
      - run: |
          mkdir bin
          cp /tmp/workspace/*.zip bin
          export TF_VAR_account_id=$AWS_ACCOUNT_ID
          env=${DEPLOY_ENV:-dev}
          if [ "$env" == "dev" ]; then
            cd deployment/dev
            terraform init
            terraform apply
            exit "$?"
          fi
  apply-terraform-prod:
    docker:
      - image: hashicorp/terraform:0.12.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace      
      - run: |
          mkdir bin
          cp /tmp/workspace/*.zip bin
          export TF_VAR_account_id=$AWS_ACCOUNT_ID
          env=${DEPLOY_ENV:-dev}
          if [ "$env" == "prod" ]; then
            cd deployment/prod
            terraform init
            terraform apply
            exit "$?"
          fi
  run-publish-pipeline-dev:
    docker:
      - image: mesosphere/aws-cli
    steps:
      - checkout
      - run: |
          export state_machine_arn="arn:aws:states:us-east-1:${AWS_ACCOUNT_ID}:stateMachine:blog-post-pipeline"
          aws stepfunctions start-execution --state-machine-arn  "$state_machine_arn"
  run-publish-pipeline-prod:
    docker:
      - image: mesosphere/aws-cli
    steps:
      - checkout
      - run: |
          export state_machine_arn="arn:aws:states:us-east-1:${AWS_ACCOUNT_ID}:stateMachine:blog-post-pipeline"
          aws stepfunctions start-execution --state-machine-arn  "$state_machine_arn"
workflows:
  version: 2
  before-merge:
    jobs:
      - build-and-persist-artifacts:
          filters:
            branches:
              ignore:
                - master
      - test-terraform-plan-dev:
          context: terraformx-dev
          filters:
            branches:
              ignore:
                - master
          requires:
            - build-and-persist-artifacts
  deploy:
    jobs:
      - build-and-persist-artifacts:
          filters:
            branches:
              only:
                - master
            tags:
              only:
                - /publish:.*/
      - apply-terraform-dev:
          context: terraformx-dev
          filters:
            branches:
              only:
                - master
          requires:
            - build-and-persist-artifacts
      - run-publish-pipeline-dev:
          context: kickoff-blog-post-pipeline-dev
          filters:
            branches:
              only:
                - master
          requires:
            - apply-terraform-dev
            - build-and-persist-artifacts
      - test-terraform-plan-prod:
          context: terraformx-prod
          filters:
            tags:
              only:
                - /publish:.*/
            branches:
              ignore: /.*/
          requires:
            - build-and-persist-artifacts
      - apply-terraform-prod:
          context: terraformx-prod
          filters:
            tags:
              only:
                - /publish:.*/
            branches:
              ignore: /.*/
          requires:
            - test-terraform-plan-prod
            - build-and-persist-artifacts
      - run-publish-pipeline-prod:
          context: kickoff-blog-post-pipeline-prod
          filters:
            tags:
              only:
                - /publish:.*/
            branches:
              ignore: /.*/
          requires:
            - apply-terraform-prod